#!/usr/bin/env fish

# move to base tmp_directory
set tmp_dir (mktemp -d)
cd $tmp_dir

function install_from_aur
    if not pacman -Q $argv > /dev/null 2>/dev/null
        aurmake $argv
    end
end

function print_bold
    echo ''
    echo -e "\033[1m"$argv"\033[0m"
end

function install_auracle
    print_bold "Building auracle…"
    cd (mktemp -d -p $tmp_dir)
    git clone 'https://aur.archlinux.org/auracle-git.git'
    cd auracle-git
    makepkg -sri
end

function download_google_fonts
    # abort if all fonts are already installed
    set -l installed 0
    set -l fc_out (fc-list : family)
    for font in $argv
        string match -qe $font $fc_out; and set installed (math $installed + 1)
    end
    test (count $argv) -eq $installed; and return

    print_bold "Installing Google fonts…"
    cd (mktemp -d -p $tmp_dir)
    set -l dl_string (string join '|' $argv | string replace -a ' ' '%20')
    curl -O -J 'https://fonts.google.com/download?family='$dl_string
    7z x fonts.zip
    mkdir -p $HOME/.local/share/fonts
    cp **.?tf $HOME/.local/share/fonts
end

function install_sudo
    print_bold "Installing sudo…"
    su -c 'pacman -S --needed sudo'
    echo "Now configure sudo so the current user can use it to gain superuser privileges. Afterwards, run this script again."
    exit
end

print_bold "This script assumes the following:"
echo -e "  - you are logged in as a non-root user\n"\
"  - network access is set up\n"\
"  - \$HOME is a clone of this repo: https://github.com/InspectorMustache/Dotdotdotfiles.git\n"\
"  - \$AURMAKE_FOLDER is set"
read -P "Continue? [y] " -n 1 answer
if [ ! (echo "$answer" | tr 'Y' 'y') = 'y' ]
    exit
end

# install sudo first
command -s sudo > /dev/null 2>/dev/null; or install_sudo

# then git
print_bold "Installing base tools for proceeding…"
sudo pacman -S --needed git fontconfig p7zip base-devel

print_bold "Merge configuration files…"
~/.local/bin/merge-configs

# some AUR stuff, if it's not installed already
print_bold "Building specific AUR packages…"
command -s auracle > /dev/null 2>/dev/null; or install_auracle
install_from_aur i3lock-color
install_from_aur unclutter-xfixes-git
install_from_aur ttf-mononoki
install_from_aur otf-font-awesome-4
install_from_aur ttf-merriweather
install_from_aur ttf-quicksand

print_bold "Downloading essential packages from the official repositiories…"
# some basic packages and globally acessible fonts
sudo pacman -S --needed \
    alsa-utils \
    openssh \
    numlockx \
    firejail \
    fzf \
    dunst \
    feh \
    i3-gaps \
    picom \
    alacritty \
    pass \
    i3blocks \
    ttf-liberation \
    noto-fonts-cjk \
    ttf-freefont \
    adobe-source-code-pro-fonts \
    arc-gtk-theme \
    ibus \
    xss-lock \
    i3lock-color \
    elinks \
    syncthing \
    dnscrypt-proxy \
    xorg-xkbcomp \
    xorg-xset

# setup firejail
print_bold "Creating firejail config…"
sudo firecfg

# once more why not
print_bold "Merge configuration files…"
~/.local/bin/merge-configs

# clean up
print_bold "Deleting temporary directories…"
rm -rf $tmp_dir

print_bold "Updating font cache…"
fc-cache -fv

print_bold "Starting systemd-timesyncd…"
sudo systemctl enable --now systemd-timesyncd

print_bold "Enabling user systemd services…"
systemctl --user enable dunst

read -P "Enter 'amd' or 'intel' to install the respective microcode package or neither to skip this step. " answer
switch $answer
    case "amd"
        sudo pacman -S amd-ucode
    case "intel"
        sudo pacman -S intel-ucode
end

read -P "If you want to skip setting up iptables, say so now. " answer
if [ -z "$answer" ]
    sudo iptables -N TCP
    sudo iptables -N UDP
    sudo iptables -P FORWARD DROP
    sudo iptables -P OUTPUT ACCEPT
    sudo iptables -P INPUT DROP
    sudo iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
    sudo iptables -A INPUT -i lo -j ACCEPT
    sudo iptables -A INPUT -m conntrack --ctstate INVALID -j DROP
    sudo iptables -A INPUT -p icmp --icmp-type 8 -m conntrack --ctstate NEW -j ACCEPT
    sudo iptables -A INPUT -p udp -m conntrack --ctstate NEW -j UDP
    sudo iptables -A INPUT -p tcp --syn -m conntrack --ctstate NEW -j TCP
    sudo iptables -A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable
    sudo iptables -A INPUT -p tcp -j REJECT --reject-with tcp-reset
    sudo iptables -t raw -I PREROUTING -m rpfilter --invert -j DROP
    sudo iptables -A INPUT -j REJECT --reject-with icmp-proto-unreachable
    sudo iptables-save -f /etc/iptables/iptables.rules
    sudo systemctl enable --now iptables
end


print_bold "Done!"
print_bold "\nLeft to do:"
print_bold "\tSet up password store"
print_bold "\tSet up GPG"
print_bold "\tSet up SSH"
print_bold "\tSet up Syncthing"
print_bold "\tSet up dnscrypt-proxy"
print_bold "\tSet up bootloader for microcode (if necessary)"
print_bold "\tInstall a display manager"
