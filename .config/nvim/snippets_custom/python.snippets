global !p
class Arg():
	def __init__(self, arg):
		self.arg = arg
		self.clean = self._clean_up(arg)

	def _clean_up(self, arg):
		if arg.rfind('=') > 0:
			arg = arg[0:arg.rfind('=')]
		return arg.strip(',')

def get_args(arg_string):
	arg_string = arg_string.strip(',')
	args = [Arg(arg).clean for arg in arg_string.split()]
	args = [arg for arg in args if arg != '']
	return args

endglobal


snippet class "Class with docstring" b
class ${1:MyClass}(${2}):
	"""${3:Docstring}"""

	def __init__(self$4):`!p
snip >> 2
for arg in get_args(t[4]):
	snip += 'self.{0} = {0}'.format(arg)`
	$0
endsnippet


snippet pdb "Run debugger from here" b
import pdb; pdb.set_trace()
endsnippet


snippet def "Function with docstring" b
def ${1:function_name}($2):
	"""${3:Docstring}"""
	$0
endsnippet


snippet doc "Docstring" b
"""${0:Docstring}"""
endsnippet
