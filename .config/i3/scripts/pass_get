#!/usr/bin/env fish

test -z $PASS_SUBNAME_SPLIT_CHAR; and set -l PASS_SUBNAME_SPLIT_CHAR '%'
test -z $PASSWORD_STORE_DIR; and set -l PASSWORD_STORE_DIR $HOME/.password-store

# get name of currently active window
test -z "$argv"; and set -l argv ""
set -l active_line (string match -ri '^_NET_ACTIVE_WINDOW\(WINDOW\).+' (xprop -root))
set -l active_id (string replace -r '^[^#]+#\s(\S+)' '$1' $active_line)
set -l name_line (string match -r 'WM_NAME\([^)]+\).+' (xprop -id $active_id))
set -l name (string match -r '".+?"$' $name_line)
set name (string replace -a ' ' '_' $name)


function get_login -a pass copy
    # get the string after "login:" in the file
    pass show $pass | string replace -rf '^login:\s?(.+)$' '$1' | read -l login
    if test -n "$login"
        if eval $copy
            echo $login | xclip -selection clipboard -i
        else
            echo $login
        end
    else
        notify-send 'Unable to retrieve login info'
        false
    end
end


function xdo_pass_entry -a pass
    set -l login (get_login $pass false); or return
    set -l pass_string (pass show $pass | head -n 1); or return
    xdotool keyup Super
    xdotool type --clearmodifiers $login
    xdotool keyup Super
    xdotool key --clearmodifiers Tab
    xdotool keyup Super
    xdotool type --clearmodifiers $pass_string
    xdotool keyup Super
    xdotool key --clearmodifiers Return
end


# get list of all pass files
set -l passes (string replace -r '^.+?\.password-store/(.+?)\.gpg$' '$1' $PASSWORD_STORE_DIR/**/*)

# loop through files and find one that matches
set -l candidates
for password in $passes
    set -l barepass (command basename $password)
    string match -qi "*$barepass*" $name
    if test $status -eq 0
        set candidates $candidates $password
    end
end

# if there are no matches try secondary names
if test -z "$candidates"
    for password in $passes
        set -l barepass (command basename $password)
        set -l subs (string split "$PASS_SUBNAME_SPLIT_CHAR" "$barepass")
        test $status -eq 0; and for sub in $subs
            string match -qi "*$sub*" $name
            if test $status -eq 0
                set candidates $password
            end
        end
    end
end


# send candidate to pass; use dmenu to select one if there are too many
set -l cand_num (count $candidates)
set -l final_candidate

if test $cand_num -eq 1
    # if there was only one password found set that to final candidate
    set final_candidate $candidates
    notify-send "Found $final_candidate."
else if test $cand_num -gt 1
    # if there's more than one, select one with dmenu
    notify-send 'Too many candidates.'
    for candidate in $candidates
        printf '%s\n' $candidate
    end | dmenu | read final_candidate
else 
    # if there's none, also select one with dmenu
    notify-send 'Nothing found. Please select manually.'
    for candidate in $passes
        printf '%s\n' $candidate
    end | dmenu | read final_candidate
end

if test -n "$final_candidate"
    # handle different command flags
    switch $argv
        case "-l"
            get_login $final_candidate true
        case "-x"
            xdo_pass_entry $final_candidate
        case "*"
            pass show -c $final_candidate
    end
    and notify-send -u low "Retrieved data from $final_candidate."
else
    notify-send 'No password selected.'
end
