#!/usr/bin/env fish

argparse -x 'u,f' 'm/manual' 'u/user' 'f/field' 'x/xdo' 'X/Xdo' -- $argv

test -z $PASS_SUBNAME_SPLIT_CHAR; and set PASS_SUBNAME_SPLIT_CHAR '%'
test -z $PASSWORD_STORE_DIR; and set PASSWORD_STORE_DIR $HOME/.password-store
test -z $PASS_FALLBACK_USER; and set PASS_FALLBACK_USER "User"

# get name of currently active window
set active_line (string match -ri '^_NET_ACTIVE_WINDOW\(WINDOW\).+' (xprop -root))
set active_id (string replace -r '^[^#]+#\s(\S+)' '$1' "$active_line")
set name_line (string match -r 'WM_NAME\([^)]+\).+' (xprop -id $active_id))
set class_line (string match -r 'WM_CLASS\([^)]+\).+' (xprop -id $active_id))
set name (string match -r '"[^"]+"$' "$name_line")
set class (string match -r '"[^"]+"$' "$class_line")
set name (string replace -a ' ' '_' "$name")
set class (string replace -a ' ' '_' "$class")
set xytool


function is_x11
    # check whether display server is x11
    set session (loginctl show-user (whoami) -p Sessions | string match -r '(?<==)\d+')
    set login_type (loginctl show-session $session -p Type | cut -d= -f2)
    test "$login_type" = "x11" && return 0 || return 1
end


function dotool -a cmd
    test "$xytool" = "xdotool" && set clearmod "--clearmodifiers"
    switch $cmd
        case type key
            $xytool $cmd $clearmod $argv[2..]
        case keyup
            if [ $xytool = "ydotool" ]
                $xytool key --up $argv[2..]
            else
                $xytool $cmd $argv[2..]
            end
        case '*'
            $xytool $cmd $argv[2..]
    end
end


function get_value -a pass key fallback
    pass show $pass >/dev/null 2>&1; or return 1
    # get the value for $key
    pass field "$key" "$pass" 2>/dev/null | read value; or set value "$fallback"
    if [ -n "$value" ]
        echo $value
    else
        return 1
    end
end


function do_type
    test -z "$argv"; and return 1
    dotool type "$argv"
end


function xdo_pass_entry -a pass
    set user (get_value $pass "user" "$PASS_FALLBACK_USER"); or return 1
    set pass_string (pass show $pass | head -n 1); or return 1
    set field_div (get_value $pass "xdoDiv")
    test -z "$field_div"; and set field_div "Tab"
    do_type $user
    dotool keyup Super
    dotool key (string split " " $field_div)
    dotool keyup Super
    do_type $pass_string
    dotool keyup Super
    dotool key Return
end


function loop_candidates -S -a prop
    # loop through candidates and find one that matches $prop
    for password in $passes
        set barepass (command basename $password)
        if string match -qie "$barepass" $prop
            set candidates $candidates $password
            continue
        end

        set subs (string split "$PASS_SUBNAME_SPLIT_CHAR" "$barepass")
        if [ ! "$subs" = "$barepass" ]
            for sub in $subs
                if not contains $password $candidates;
                   and string match -qie "$sub" $prop
                    set candidates $candidates $password
                    continue
                end
            end
        end
    end
end


function handle_candidate -S -a candidate
    # handle identified final candidate in the way specified by cmdline arguments

    # -X is a special case, if it is passed, everything else is ignored
    if [ -n "$_flag_X" ]
        xdo_pass_entry $candidate; or return 1; and return 0
    end

    # otherwise retrieve requested info
    set info
    if [ -n "$_flag_u" ]
        set info (get_value $candidate "user" "$PASS_FALLBACK_USER")
        or begin
            notify-send "Username for $candidate not found."
            return 1
        end
    else if [ -n "$_flag_f" ]
        # make sure the gpg entry is password-unlocked so dmenu doesn't hang
        pass show $candidate >/dev/null 2>&1; or return 1
        set field (pass field -l $candidate | dmenu)
        or begin
            notify-send "No field for $candidate selected."
            return 1
        end
        set info (get_value $candidate "$field")
    else
        # if neither of these flags is present just get the password itself (first line)
        set info (pass show $candidate | head -n 1); or return 1
    end

    # handle info
    if [ -z "$_flag_x" ]
        # default: copy to clipboard
        echo -n -- "$info" | xclip -selection clipboard; or return 1
        and notify-send -u low "Copied information from $candidate to clipboard."
        fish -c 'sleep 45; and echo -n "" | xclip -selection clipboard' & disown
    else
        notify-send -u low "Entering information from $candidate..."
        do_type "$info"; or return 1
    end
end


function interactive_select -a message
    test -n "$message"; and notify-send "$message"
    for candidate in $argv[2..-1]
        printf '%s\n' $candidate
    end | dmenu
end


if command -q xdotool && is_x11
    set xytool xdotool
else if command -q ydotool
    set xytool ydotool
else
    notify-send "No suitable input application found."
    exit 1
end

# get list of all pass files
set passes (string replace -fr '^.+?\.password-store/(.+?)\.gpg$' '$1' $PASSWORD_STORE_DIR/**/*)

# loop through files and find one that matches based on name property or if
# that doesn't work class property
# skip this test if the manual flag was passed
set candidates
if [ -z "$_flag_m" ]
    loop_candidates $name
    test -z "$candidates"; and loop_candidates $class
end

# send candidate to pass; use dmenu to select one if there are too many
set cand_num (count $candidates)
set final_candidate

if [ "$_flag_m" ]
    # select password manually if -m flag was specified
    interactive_select "" $passes | read final_candidate
else if [ $cand_num -eq 1 ]
    # if there was only one password found set that to final candidate
    set final_candidate $candidates
    notify-send "Found $final_candidate."
else if [ $cand_num -gt 1 ]
    # if there's more than one, select one with dmenu
    interactive_select 'Too many candidates.' $candidates | read final_candidate
else 
    # if there's none, also select one with dmenu
    interactive_select 'Nothing found. Please select manually.' $passes | read final_candidate
end

if [ -n "$final_candidate" ]
    handle_candidate $final_candidate; or exit 1
else
    notify-send 'No password selected.'
    exit 1
end
