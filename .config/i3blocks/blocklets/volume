#!/usr/bin/env perl
use strict;
use warnings;
# use diagnostics;

$ENV{LANG} = 'C';

sub get_volume {
    my $volume = `wpctl get-volume \@DEFAULT_AUDIO_SINK\@`;
    if ($volume =~ /MUTED/){
        return -1
    }

    # get volume
    $volume =~ /Volume:\s+([\d.]+)$/;
    return $1*100;
}

sub wrap_str {
    return "<span size='x-small'>" . $_[0] . "</span>\n";
}

sub set_sink {
    system("wpctl", "set-" . $_[0], '@DEFAULT_AUDIO_SINK@', $_[1]);
}

sub block_button_parse {
    if ($_[0] == 1) {
        set_sink("mute", "toggle");
    } elsif ($_[0] == 4) {
        set_sink("volume", "5%+");
    } elsif ($_[0] == 5) {
        set_sink("volume", "5%-");
    }
}

sub vol_button_pressed {
    my $match = 0;

    if (! $ENV{BLOCK_BUTTON}) { return $match; }

    for ( 1, 4, 5 ){
        print($_);
        if ($_ eq $ENV{BLOCK_BUTTON}) {
            $match = 1;
            last;
        }
    }
    return $match;
}

if (vol_button_pressed()) {
    block_button_parse($ENV{BLOCK_BUTTON})
} elsif ($ARGV[0]){
    set_sink($ARGV[1], $ARGV[2])
}

my $volume = get_volume();

if ($ENV{BLOCK_BUTTON} or $ARGV[0]) {
    if ($volume == -1) {
        system("dunstify", "--replace=999", "Volume", "muted");
    } else {
        system("dunstify", "--replace=999", "--hints=int:value:" . $volume, "Volume");
    }
}

if ($volume < 0) {
    print(wrap_str(""));
} elsif ($volume < 100) {
    print(wrap_str($volume));
} elsif ($volume = 100) {
    print("\n");
} else {
    print("<span foreground=\"#" . $ENV{__BASE08} . "\">" . wrap_str($volume));
}

if ($ARGV[0]) {
    system("pkill", "-RTMIN+" . $ARGV[0], "i3blocks")
}
