;; %-LOCATION:$HOME/.emacs.d/subinits/init-mu4e.el-% %-CUSTOM:$HOME/.config/mu4e-contexts-% -*-emacs-lisp-*-
;; DO EDITS HERE: $HOME/.local/share/skel/mu4e.skel
;; -*- lexical-binding: t -*-
(require 'subr-x)
;; set mu4e as emacs default mail program
(setq mail-user-agent #'mu4e-user-agent)

;; smtp
(use-package smtpmail
  :straight nil
  :after mu4e
  :config
  (setq message-send-mail-function 'smtpmail-send-it))

(use-package mu4e
  :commands (mu4e mu4e-user-agent)
  :straight nil
  :config
  (setq mu4e-context-policy nil)
  (setq mu4e-compose-context-policy nil)
  (defvar my/mu4e~account-list nil
    "List of contexts that have been switched to. This will be passed to \"mbsync\" on exiting Emacs.")
  ;; set up private context
  (make-mu4e-context-account
   :name "posteo"
   :user-mail-address "{{{MAIL_ADDRESS}}}"
   :sent-folder "Sent"
   :drafts-folder "Drafts"
   :trash-folder "Trash"
   :refile-folder "Archiv"
   :vars `((user-full-name . "{{{REAL_NAME}}}")
           (mu4e-get-mail-command . "mbsync posteo")
           (smtpmail-mail-address . ,user-mail-address)
           (smtpmail-stream-type . ssl)
           (smtpmail-smtp-server . "posteo.de")
           (smtpmail-smtp-service . 465)
           (smtpmail-queue-dir . "~/.local/share/mail/queued_mail/cur")
           (mu4e-maildir-shortcuts . 
                                   (("/posteo/Arbeit+Bildung"    . ?b)
                                    ("/posteo/Archiv"            . ?a)
                                    ("/posteo/Drafts"            . ?d)
                                    ("/posteo/Following"         . ?f)
                                    ("/posteo/Inbox"             . ?i)
                                    ("/posteo/Privat"            . ?p)
                                    ("/posteo/Sent"              . ?s)
                                    ("/posteo/Transaktionen"     . ?t)))))

  ;; room for additional contexts
  {{{custom}}}
 
  ;; add context to my/mu4e~account-list after each switch (if they're not
  ;; already there)
  (add-hook 'mu4e-context-changed-hook
            (lambda ()
              (cl-pushnew (mu4e-context-name (mu4e-context-current)) my/mu4e~account-list)))
  ;; sync on emacs exit
  (add-to-list 'kill-emacs-query-functions
               (defun my//final-mail-sync ()
                 "Sync all mail accounts that we have switched to during this session."
                 (message
                  (concat "Syncing mail accounts ("
                          (string-join my/mu4e~account-list ", ")
                          ")..."))

                 (let* ((cmd (string-join (push "mbsync" my/mu4e~account-list) " "))
                        (result (call-process-shell-command cmd)))
                   (mu4e-update-index)
                   (not
                    (unless (eql result 0)
                      (display-warning 'mbsync "Error syncing mail accounts" :error))))))
  ;; context on startup
  (mu4e-context-switch nil "posteo")

  ;; headers view
  (setq mu4e-use-fancy-chars t
        mu4e-headers-include-related nil
        mu4e-headers-advance-after-mark nil
        mu4e-headers-leave-behavior 'apply
        mu4e-headers-fields '((:human-date . 12)
                              (:flags . 6)
                              (:from-or-to . 22)
                              (:subject)))

  ;; message view
  (setq mu4e-confirm-quit nil
        mu4e-view-scroll-to-next t
        mu4e-change-filenames-when-moving t
        mu4e-view-show-images t
        mu4e-html2text-command "w3m -I UTF-8 -T text/html"
        mu4e-attachment-dir (xdg-user-dir "DOWNLOAD")
        mu4e-save-multiple-attachments-without-asking t)
  (when (image-type-available-p 'imagemagick)
    (imagemagick-register-types))
  (add-to-list 'mu4e-view-actions
               '("bopen in browser" . mu4e-action-view-in-browser))

  ;; don't show cursor in emacs state when in message or headers view
  (defun my//mu4e-view-cursor-handling ()
    (add-hook 'evil-emacs-state-entry-hook
              (lambda () (internal-show-cursor nil nil))
              nil t)
    (add-hook 'evil-emacs-state-exit-hook
              (lambda () (internal-show-cursor nil t))
              nil t))
  (dolist (mode '(mu4e-view-mode mu4e-headers-mode))
    (my/add-hook-to-mode
     'evil-emacs-state-entry-hook
     (lambda () (internal-show-cursor nil nil))
     mode)
    (my/add-hook-to-mode
     'evil-emacs-state-exit-hook
     (lambda () (internal-show-cursor nil t))
     mode))
  (add-hook 'mu4e-main-mode-hook (lambda () (internal-show-cursor nil t)))

  ;; compose view
  (setq mu4e-compose-complete-only-personal t
        mu4e-compose-signature-auto-include nil
        mu4e-compose-dont-reply-to-self t
        mu4e-compose-format-flowed t
        fill-flowed-encode-column 72
        mu4e-compose-cite-function #'message-cite-original
        message-citation-line-function #'message-insert-formatted-citation-line
        message-citation-line-format "\nAm %A, den %x um %X schrieb %f:"
        message-kill-buffer-on-exit t)
  (add-hook 'mu4e-compose-mode-hook
            (defun my/setup-mu4e-compose-settings ()
              (visual-line-mode)
              (let*
                  ((sender1 (cdr (car
                                  (ignore-errors
                                    (mu4e-message-field mu4e-compose-parent-message :from)))))
                   (ext (or (car (ignore-errors (s-match "\.[^\.]+?$" sender1)))
                            ".de")))
                ;; decide which dict to used based on the extension of the
                ;; parent message's email adress, use de_DE if there is no
                ;; parent message
                (setq ispell-local-dictionary (if (string= ext ".de")
                                                  "de_DE"
                                                "en_AU"))
                (flyspell-mode)
                (message "Ispell Dictionary set to %s." ispell-local-dictionary))))

  ;; always sync after sending a new message
  (add-hook 'message-sent-hook
            (lambda () (mu4e-update-mail-and-index t)))
  
  (defun my/mu4e-update-on-kill-emacs ()
    (when (and mu4e-get-mail-command
               (process-live-p (get-buffer-process mu4e~update-buffer)))
      (run-hooks 'mu4e-update-pre-hook)
      ()))

  (defun my/mu4e-headers-mark-toggle ()
    (interactive)
    (if (mu4e-mark-docid-marked-p mu4e~highlighted-docid)
        (mu4e-headers-mark-and-next 'unmark)
      (mu4e-headers-mark-and-next 'something)))

  (defun my/mu4e-headers-mark-pattern ()
    (interactive)
    (cl-letf (((symbol-function #'mu4e~mark-get-markpair)
               (lambda (&rest args) '(something))))
      (mu4e-headers-mark-pattern)))

  (defun my/mu4e-view-mark-toggle ()
    (interactive)
    (mu4e~view-in-headers-context
     (if (mu4e-mark-docid-marked-p mu4e~highlighted-docid)
         (mu4e-headers-mark-and-next 'unmark)
       (mu4e-headers-mark-and-next 'something))))

  (defun my/mu4e-view-mark-pattern ()
    (interactive)
    (mu4e~view-in-headers-context
     (my/mu4e-headers-mark-pattern)))

  (defun my/mu4e-headers-handle-deferred (action)
    (cl-letf (((symbol-function #'mu4e-read-option)
               (lambda (&rest args) action)))
      (mu4e-mark-resolve-deferred-marks))))

(provide 'init-mu4e)
