#!/bin/fish

set SKEL_FILES_PATH "$HOME/.local/share/skel/"

function inject_custom
    # inject the contents of custom_file into target_lines at the specified point

    argparse 'c=' -- $argv

    set custom_file $_flag_c
    set target_lines $argv

    # do the replacing
    for line in $target_lines
        if string match -eq '{{{custom}}}' $line
            for custom_line in (cat $custom_file)
                echo $custom_line
            end
        else
            echo $line
        end
    end
end

function safe_write
    # only write to file if there were no errors

    argparse 'f=' -- $argv

    set write_file $_flag_f
    set target_lines $argv

    if [ -z "$argv" ]
        echo "Skipping merging for $write_file…" >&2
    else
        string join \n $target_lines > $write_file
    end
end

function process_skel -a skel_file
    set location (head -n 1 $skel_file | string match -r '(?<=%-LOCATION:).+?(?=-%)')
    set custom (head -n 1 $skel_file | string match -r '(?<=%-CUSTOM:).+?(?=-%)')
    # resolve variables in string
    set location (eval echo $location)
    set custom (eval echo $custom)

    if [ -n "$custom" -a ! -f "$custom" ]
        echo "$skel_file points to a custom file that does not exist." >&2
        echo "Skipping custom file merging…" >&2
        set custom ''
    end

    if [ -z "$location" ]
        echo "$skel_file has no line specifying its target location." >&2
    else if [ -z "$custom" ]
        safe_write -f $location -- (mergevars $skel_file | tail -n +2)
    else
        set merged_var_lines (mergevars -i custom $skel_file 2>/dev/null | tail -n +2)
        safe_write -f $location -- (inject_custom -c $custom -- $merged_var_lines)
    end
end

for file in $SKEL_FILES_PATH/*
    process_skel $file
end
