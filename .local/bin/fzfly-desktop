#!/usr/bin/env python

import os
import sys
import glob
import subprocess
import shlex
import configparser
from contextlib import contextmanager


class ConfigParser(configparser.ConfigParser):
    def __init__(self):
        super().__init__(interpolation=None)
        self.optionxform = str


CONF_DIR = os.path.join(
    os.getenv("XDG_CONFIG_HOME", default=os.path.join(os.getenv("HOME"), ".config")),
    "fzfly",
)
XDG_DESKTOP_FILE_DIRS = [
    os.path.join("/", "usr", "share", "applications"),
    os.path.join(os.getenv("HOME"), ".local", ".share", "applications"),
]


def get_config(conf_file):
    """Return configparser instance for conf_file."""
    with open(conf_file, mode="r") as f:
        cp = ConfigParser()
        cp.read_file(f)
        return cp


def get_entry_freq(entry):
    """Get run frequency for entry."""
    try:
        cp = get_config(os.path.join(CONF_DIR, "fzfly-desktop"))
        return int(cp["Frequency"][entry])
    except (FileNotFoundError, KeyError):
        return 0


@contextmanager
def update_conf(conf_file, ensure_sections=[]):
    """Context manager for reading and writing to conf_file. Use ensure_sections to make sure specific sections exist."""
    cp = get_config(conf_file)
    for s in ensure_sections:
        if s not in cp.sections():
            cp[s] = {}

    yield cp
    with open(conf_file, mode="w") as f:
        cp.write(f)


def increase_entry_freq(entry, i):
    """Increase run frequency for entry by i."""
    with update_conf(
        os.path.join(CONF_DIR, "fzfly-desktop"), ensure_sections=["Frequency"]
    ) as cp:
        try:
            freq = int(cp["Frequency"][entry])
        except KeyError:
            freq = 0
        cp["Frequency"][entry] = str(freq + i)


def get_desktop_files(folder):
    """Return a dict with desktop files and their names in folder."""
    fs = glob.glob(os.path.join(folder, "*.desktop"))
    return {get_desktop_key(f, "Name"): f for f in fs}


def get_desktop_key(desktop_file, key):
    """Get value of key in desktop file f."""
    cp = get_config(desktop_file)

    for loc in get_locale():
        f = list(
            filter(lambda x: x == "{}{}".format(key, loc), cp["Desktop Entry"].keys())
        )
        if f:
            return cp["Desktop Entry"][f[0]]
    else:
        return os.path.basename(desktop_file)


def get_locale():
    """Return tuple with gradually shorter locale representations."""
    return [
        *["[{}]".format(x) for x in (os.getenv("LANG")[0:2], os.getenv("LANG")[0:5])],
        "",
    ]


def clean_cmd(cmd):
    """Remove % tokens from cmd."""
    for t in filter(lambda x: x.startswith("%"), cmd):
        cmd.remove(t)
    return cmd


if __name__ == "__main__":
    proc = subprocess.Popen(
        ["dmenu"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, encoding="UTF-8"
    )
    files = {}

    for f in XDG_DESKTOP_FILE_DIRS:
        files.update(get_desktop_files(f))

    filelist = "\n".join(sorted(files.keys(), key=get_entry_freq, reverse=True))
    out, err = proc.communicate(input=filelist)
    out = out.rstrip("\n")
    if proc.returncode:
        sys.exit(proc.returncode)

    increase_entry_freq(out, 1)
    sel = files[out.rstrip("\n")]

    cmd = clean_cmd(shlex.split(get_desktop_key(sel, "Exec")))
    sys.exit(subprocess.run(cmd).returncode)
