#!/bin/fish


set parent_tmp_dir (command mktemp --suffix='-pacupdate' -d)
set cache_file $HOME/.cache/pacupdate
set repo_updates
set repo_updates_count
set aur_updates
set aur_updates_count
set git_updates
set git_updates_count
set exit_status 0

# create a cache file if there isn't already one
if [ ! -e $cache_file ]
    mkdir -p (dirname $cache_file)
    touch $cache_file
end


function mktemp
    # override mktemp to use $parent_tmp_dir
    command mktemp -p "$parent_tmp_dir" $argv
end


# create a copy of cache_file to make changes to
set cache_file_updated (mktemp --suffix='-pacupdate')
cp $cache_file $cache_file_updated


# setup fallbacks for envar settings
function set_or_fallback -S -a var fallback
    if not set -q $var
        set -g $var $fallback
    end
end


set_or_fallback PACUPDATE_MIRRORLIST_URL "https://archlinux.org/mirrorlist/?country=all&protocol=http&protocol=https&ip_version=4"
set_or_fallback PACUPDATE_RSS_FEED_URL "https://archlinux.org/feeds/news/"
set_or_fallback PACUPDATE_CURL_TIMEOUT 20
set_or_fallback PACUPDATE_MIRRORLIST_INTERVAL 14
set_or_fallback PACUPDATE_GIT_INTERVAL 14


function test_sudo
    if not command -sq sudo
        echo "Sudo not found on system. Aborting..." >&2
        return 1
    end
end


function formatted_echo -a color prefix msg
    set_color -o $color
    echo -n "$prefix "
    set_color normal
    set_color -o
    echo $msg
    set_color normal
end


function echo_head
    argparse 'n-nolb' 'c=' -- $argv
    [ -z "$_flag_c" ]
        and set _flag_c green

    # skip linebreak on nolb flag
    [ ! $_flag_nolb ]
        and echo ""

    formatted_echo $_flag_c "==>" "$argv"
end


function echo_important -a msg
    formatted_echo blue "::" $msg
end


function test_installed -a cmd
    if not command -sq $cmd
        echo_important "$cmd not installed. Skipping..."
        return 1
    end
end


function ring_bell
    # ring the terminal bell, call this before any interactive command
    printf "\a" >&2
end


function confirm -a msg
    # show a confirm prompt that doesn't print user input
    ring_bell
    set_color -i
    echo -n $msg
    set_color normal
    head -n 1 - | read -l _ #throwaway var
    echo
end


function yn_prompt -a msg
    ring_bell
    set answer
    while true
        read --prompt="set_color -o; echo -n "(string escape $msg)" [Y/n]\ ; set_color normal" answer || return 1
        set answer (string lower $answer)

        # no answer results in falling back to default 'y'
        test -z "$answer"; and set answer y

        if [ $answer = 'y' -o $answer = 'n' ]
            break
        end
    end

    if [ "$answer" = 'y' -o -z "$answer" ]
        return 0
    else
        return 1
    end
end


function set_cache_var -a key value
    if string match -qr '^'"$key" < $cache_file_updated
        sed -i 's/\('"$key"' = \).*/\1'"$value"'/' $cache_file_updated
    else
        echo "$key = $value" >> $cache_file_updated
    end
end


function get_cache_var -a key
    awk -v key="$key" -F' = ' 'BEGIN {ec=1} $1 ~ key {print $2; ec=0} END {exit ec}' $cache_file_updated
end


function get_added_lines -a file1 file2
    # show all lines that have been added to file1 in file2
    set linecount (count (string split \n < "$file1"))
    set linecount (math $linecount + 1)
    tail -n +$linecount $file2
end


function check_update_pacman_mirrorlist
    echo_head --nolb "Pacman mirrorlist outdated?"
    set last_update_mirrorlist (get_cache_var last_update_mirrorlist)
    # convert PACUPDATE_MIRRORLIST_INTERVAL to seconds
    set update_interval (math $PACUPDATE_MIRRORLIST_INTERVAL \* 86400)

    if [ -z $last_update_mirrorlist ]
        set_cache_var last_update_mirrorlist (date +%s)
        echo "There are no previous update checks for the mirrorlist."
    else if [ (math (date +%s) - $last_update_mirrorlist) -ge $update_interval ]
        set_cache_var last_update_mirrorlist (date +%s)
        echo_important "Yes."
    else
        echo_important "No."
        return 0
    end

    update_pacman_mirrorlist || return 1
end


function update_pacman_mirrorlist
    echo "Retrieving current copy..."
    set mirrorlist_temp (mktemp --suffix="-mirrorlist")
    curl -m "$PACUPDATE_CURL_TIMEOUT" -s "$PACUPDATE_MIRRORLIST_URL" > "$mirrorlist_temp" 2>/dev/null
        or begin
            echo 'Error retrieving the mirrorlist. Is $PACUPDATE_MIRRORLIST_URL set correctly?' >&2
            return 1
        end

    # cleaning up mirrorlist
    sed -i 's/^#Server/Server/' "$mirrorlist_temp"

    # backing up the old mirrorlist and setting the new one in place
    sudo cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup || return 1
    sudo mv $mirrorlist_temp /etc/pacman.d/mirrorlist || return 1
    echo_important "Mirrorlist updated."
end


function check_mailing_list
    echo_head "News in the Arch Mailing List?"
    test_installed sfeed || return 0
    test_installed lynx || return 0

    set last_update_msg_id (get_cache_var last_update_msg_id)
    set mail_list_file (mktemp --suffix="-maillist")
    echo "Retrieving RSS news feed..."
    curl -m "$PACUPDATE_CURL_TIMEOUT" -s "$PACUPDATE_RSS_FEED_URL" > $mail_list_file
    or begin
        echo "Error retrieving mailing list." >&2
        return 1
    end

    # get all message ids until $last_update_msg_id
    set msg_id_list (sfeed < $mail_list_file | awk -F\t "/$last_update_msg_id/ {print \$1; exit}; {print \$1}")
    set msg_counter (count $msg_id_list)
    set msg_title_list (sfeed < $mail_list_file | cut -f2)
    set msg_url_list (sfeed < $mail_list_file | cut -f3)
    set msg_content_list (sfeed < $mail_list_file | cut -f4)

    if not contains $last_update_msg_id (sfeed < $mail_list_file | cut -f1)
        echo -e "Last message id not found in the RSS feed.\nThis either means that the last check was a long time ago or that this is the first time pacupdate is run."
        set_cache_var last_update_msg_id $msg_id_list[1]
        yn_prompt "Continue anyway?" && return 0 || return 1
    else if [ $last_update_msg_id = $msg_id_list[1] ]
        echo_important "No news."
        return
    else
        echo_important "Yes, $msg_counter unread news item(s)."

        for i in (seq $msg_counter)
            print_mailing_list_msg "$msg_title_list[$i]" "$msg_url_list[$i]" "$msg_content_list[$i]"
            confirm 'Press Enter to continue.'
        end

        set_cache_var last_update_msg_id $msg_id_list[1]
        yn_prompt "Continue with the updating process?" && return 0 || return 1
    end
end


function print_mailing_list_msg -a title url content
    set_color -o; echo "$title"; set_color normal
    echo -e "$url\n"
    echo $content | lynx -dump -stdin | string replace '\n' ''
end


function get_git_package_commit -a pkg
    string match -r '.{7}(?=-\d+$)' (pacman -Q $pkg | string split ' ')[-1]
    # if the package version number doesn't contain the revision id, there's no
    # way of comparing it with the most recent revision, therefore:
    or echo 0
end


function get_package_buildtime -a pkg
    set -lx LANG en_US.UTF-8

    pacman -Qi $pkg | \
    string replace -rf 'Build Date\s+:\s+(.+)$' '$1' | \
    read -l builddate_time || return 1
    date -d $builddate_time +%s
end


function check_git_package_schedule -a pkg
    # check if a git package is scheduled for an update check
    set last_check (get_cache_var "$pkg-checkdate" || echo 0)
    set last_update (get_package_buildtime $pkg)
    set check_interval (math $PACUPDATE_GIT_INTERVAL \* 86400) # convert to seconds

    # if the package has been updated since the last check, use the update time instead
    if [ $last_update -gt $last_check ]
        set last_check $last_update
    end

    if [ (math (date +%s) - $last_check) -ge $check_interval ]
        return 0
    else
        return 1
    end
end


function get_git_url -a pkg
    # get the git_url for pkg
    set git_dir (mktemp -d --suffix="-$pkg")
    git clone "https://aur.archlinux.org/$pkg.git" "$git_dir" >/dev/null 2>&1
        or begin
            echo "Error retrieving package $pkg from AUR." >&2
            return 1
        end
    set git_urls (bash --norc -c "source $git_dir/PKGBUILD && echo \$source")

    string replace -r '^([^:]+::)?(git\+)?' '' $git_urls[1]
end


function retrieve_git_fragment -a vcs_url frag fallback
    # extract fragment from vcs_url or fall back to $fallback
    string replace -rf '^[^#]+#.*'$frag'=(.+?)(#|$)' '$1' $vcs_url || echo $fallback
end


function get_last_git_commit -a git_url
    set git_dir (mktemp -d)

    # retrieve fragments from the url
    set git_commit (retrieve_git_fragment "$git_url" commit HEAD)
    # if there's a specific commit specified we can skip the check because
    # unless the PKGBUILD gets updated, we will always retrieve that specific
    # commit
    [ "$git_commit" != "HEAD" ]
        and return 2
    set git_branch (retrieve_git_fragment "$git_url" branch master)
    set git_tag (retrieve_git_fragment "$git_url" tag "")

    # clean up $git_url
    set git_url (string replace -r '#.+$' '' "$git_url")

    # prefer tag reference over branch when cloning
    set git_branch_arg
    if [ -n "$git_tag" ]
        set git_branch_arg $git_tag
    else
        set git_branch_arg $git_branch
    end

    git clone "$git_url" "$git_dir" -b "$git_branch_arg" --depth=1 >/dev/null 2>&1
        or begin
            echo "Error cloning from $git_url." >&2
            return 1
        end

    # this is the return value
    git -C "$git_dir" log -1 --format=format:%h || return 1
end


function check_git_package -a pkg
    # check a single git package for updates and return without status if there are any

    # skip immediately if it's not time for a check yet
    check_git_package_schedule $pkg || return 1

    echo "Checking updates for $pkg..."
    set git_url (get_git_url $pkg)
    set last_git_commit (get_last_git_commit "$git_url")
    # if the url is commit specific (see get_last_git_commit function) we can
    # abort here
    if [ $status != 0 ]
        return 1
    end

    set_cache_var "$pkg-checkdate" (date +%s)

    if [ $last_git_commit != (get_git_package_commit $pkg) ]
        return 0
    else
        return 1
    end

end


function check_repo_updates
    echo_head "Updates in Pacman's repos?"
    sudo pacman -Sy > /dev/null || return 1
    set repo_updates (pacman -Quq)
    set repo_updates_count (count $repo_updates)
    contains archlinux-keyring $repo_updates && set -g keyring_update

    if [ $repo_updates_count -gt 0 ]
        echo_important "Yes, $repo_updates_count new updates."
    else
        echo_important "None."
    end
end


function check_aur_updates
    echo_head "Updates in the AUR?"

    # skip if auracle's not installed
    test_installed auracle || return 0

    for pkg in (auracle sync -q)
        # this is for packages that get moved from the aur to the official repos
        not contains $pkg $repo_updates; and set -a aur_updates $pkg
    end
    set aur_updates_count (count $aur_updates)

    if [ $aur_updates_count -gt 0 ]
        echo_important "Yes, $aur_updates_count new updates."
    else
        echo_important "None."
    end
end


function check_git_updates
    echo_head "Outdated git-packages?"

    # skip if git's not installed
    test_installed git || return 0

    set git_pkgs (pacman -Qq | string match -er -- '-git$')
    for pkg in $git_pkgs
        if not contains $pkg $aur_updates
            check_git_package $pkg || continue

            set -a git_updates $pkg
        end
    end

    set git_updates_count (count $git_updates)

    if [ $git_updates_count -gt 0 ]
        echo_important 'Yes, '$git_updates_count' new updates.'
    else
        echo_important "None."
    end
end


function get_warnings_from_log -a old_log new_log
    set new_lines (get_added_lines "$old_log" "$new_log")
    set warnings (string replace -rf '^\[[^\]]+\] \[ALPM\] (warning):\s+' '$1' -- $new_lines)

    if any $warnings
        echo_important "Pacman issued these warnings:"
        printf -- '- %s\n' $warnings
        confirm 'Press Enter to continue.'
    end
end


function install_repo_updates
    # skip if there are no updates
    test $repo_updates_count -gt 0 || return 0

    set pacman_log (string replace -rf '^LogFile\s+=\s+(\S+)' '$1' < /etc/pacman.conf || echo "/var/log/pacman.log")
    set pacman_old_log (mktemp --suffix=".log.old")
    cp $pacman_log $pacman_old_log || return 1

    echo_head "Installing updates from Pacman's repos..."
    if set -q keyring_update
        echo "Upgrading archlinux-keyring before other packages..."
        sudo pacman -Sy archlinux-keyring || return 1
    else
        # Always sync database before upgrade no matter how little time has passed
        sudo pacman -Sy || return 1
    end
    sudo pacman -Su || return 1

    get_warnings_from_log $pacman_old_log $pacman_log
    # TODO: process new log entries -- test
end


function build_aur_pkg
    argparse 'p/pkg=' 'd/dep' -- $argv
    set makepkg_args ""
    [ $_flag_dep ]; and set makepkg_args "--asdeps"
    echo_important "Building and installing $_flag_pkg..."
    cd (mktemp -d --suffix="-$_flag_pkg")
    git clone "https://aur.archlinux.org/$_flag_pkg.git" . >/dev/null 2>&1
        or begin
            echo "Error retrieving package $_flag_pkg from AUR." >&2
            return 1
        end
    makepkg -sri $makepkg_args || return 1
end


function install_aur_updates
    # skip if there are no aur_updates
    test $aur_updates_count -gt 0  || return 0

    echo_head "Installing updates from the AUR..."

    # skip if git's not installed
    test_installed git || return 0

    for aur_pkg in $aur_updates
        aurmake $aur_pkg
            or yn_prompt "Error installing $aur_pkg. Continue anyway? " || return 1
    end
end


function install_git_updates
    test $git_updates_count -gt 0  || return 0

    echo_head "Installing Git updates..."

    for pkg in $git_updates
        aurmake -f $pkg
            or yn_prompt "Error installing $aur_pkg. Continue anyway? " || return 1
    end
end


function install_updates
    # skip if there are no updates
    set total_updates_count (math $repo_updates_count + $aur_updates_count + $git_updates_count)
    if not [ $total_updates_count -gt 0 ]
        return 0
    end

    yn_prompt "Install total of $total_updates_count updates?" || return 1
    install_repo_updates || return 1
    install_aur_updates || return 1
    install_git_updates || return 1
end


function merge_cache_file
    mv $cache_file_updated $cache_file
end


function main
    test_sudo
    and check_update_pacman_mirrorlist
    and check_mailing_list
    and check_repo_updates
    and check_aur_updates
    and check_git_updates
    and install_updates
    and merge_cache_file
    or begin
        echo_head -c red "Update aborted."
        and set exit_status 1
    end

    # clean up
    rm -rf $parent_tmp_dir
    exit $exit_status
end

if not status is-interactive
    main
end
