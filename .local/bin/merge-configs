#!/bin/fish

set SKEL_FILES_PATH "$HOME/.local/share/skel"
set VENDOR_SKEL_FILES_PATH "$HOME/.local/share/vendor-skel"

function inject_custom
    # inject the contents of custom_file into target_lines at the specified point

    argparse 'c=' -- $argv

    set custom_file $_flag_c
    set target_lines $argv

    # do the replacing
    for line in $target_lines
        if string match -eq -- '{{{custom}}}' $line
            for custom_line in (cat $custom_file)
                echo $custom_line
            end
        else
            echo $line
        end
    end
end

function safe_write -a write_file

    # only write to file if there were no errors
    set target_lines $argv[2..-1]

    if [ -z "$target_lines" ]
        echo "Skipping merge for $write_file..." >&2
        return 1
    else if [ "$ACTIVE_PATH" = "$VENDOR_SKEL_FILES_PATH" ]
        sudo mkdir -p (dirname "$write_file")
        string join -- \n $target_lines | sudo tee "$write_file" >/dev/null || return 1
    else
        mkdir -p (dirname "$write_file")
        string join -- \n $target_lines > "$write_file" || return 1
    end
end

function get_meta_line -a skel_file field
    head -n 1 $skel_file | string match -r -- '(?<=%-'$field':).+?(?=-%)'
end

function process_skel -a skel_file
    set location (get_meta_line "$skel_file" LOCATION)
    set custom (get_meta_line "$skel_file" CUSTOM)
    set permissions (stat -c "%a" "$skel_file")
    # resolve variables in string
    set location (eval echo $location)
    set custom (eval echo $custom)

    if [ -n "$custom" -a ! -f "$custom" ]
        echo "$skel_file points to a custom file that does not exist." >&2
        echo "Skipping custom file merging..." >&2
        set custom ''
    end

    if [ -z "$location" ]
        echo "$skel_file has no line specifying its target location." >&2
        return 1
    end

    if [ -z "$custom" ]
        safe_write "$location" (mergevars -q $skel_file | tail -n +2)
        or return 1
    else
        set merged_var_lines (mergevars -q -i custom $skel_file | tail -n +2)
        safe_write "$location" (inject_custom -c $custom -- $merged_var_lines)
        or return 1
    end

    # copy permissions from skel file to destination
    if [ "$ACTIVE_PATH" = "$VENDOR_SKEL_FILES_PATH" ]
        sudo chmod $permissions "$location"
        or return 1
    else
        chmod $permissions "$location"
        or return 1
    end
end

function prompt -a file
    read -P "About to merge $file. Continue? [Y/n] " -n 1 answer
    set answer (string lower -- $answer)
    test -z "$answer"; and set answer y
    if [ "$answer" = "y" ]
        return 0
    else
        return 1
    end
end

function main
    argparse -n merge-configs 'v/vendor' 'p/prompt' -- "$argv" || return 1
    # set where to find the files to parse
    if [ -n "$_flag_v" ]
        set -g ACTIVE_PATH $VENDOR_SKEL_FILES_PATH
    else
        set -g ACTIVE_PATH $SKEL_FILES_PATH
    end

    if [ ! -d "$ACTIVE_PATH" ]
        echo "$ACTIVE_PATH is not a valid path..."
        return 1
    end

    for file in "$ACTIVE_PATH"/*
        if [ -n "$_flag_p" ]
            prompt "$file" || continue
        end

        process_skel "$file"
    end
end

if not status is-interactive
    main $argv
    exit $status
end
